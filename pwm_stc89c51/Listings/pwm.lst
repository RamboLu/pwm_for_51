C51 COMPILER V9.54   PWM                                                                   03/03/2016 01:22:56 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN .\Objects\pwm.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE pwm.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\pwm.l
                    -st) TABS(2) OBJECT(.\Objects\pwm.obj)

line level    source

   1          /*
   2          输出通道，输出频率和占空比可调节的PWM波
   3          1.输出通道可调为P0.0-P0.7
   4          2.频率在2~2000Hz范围内连续调节，有且只有1HZ时占空比大于65%时不准确（bug）
   5          3.占空比在0%~100%之间连续调节
   6          4.通道口，频率和占空比通过串口数据来控制，格式为  SET 0 2000 090
   7          使用stc89c51
   8          */
   9          #include <reg52.h>
  10          #include <system.h>
  11          
  12          //定义全局变量
  13          uchar Buffer[14]={0};
  14          uchar Buffer_1[14]={'S','E','T',' ','0',' ','2','0','0','0',' ','1','0','0'};//SET 0 2000 100
  15          bit send_flag;    //串口发送8位数据
  16          bit flag_error;   //输入格式错误
  17          uint num,num_high,n;//周期；高电平；进中断次数
  18          uchar k;
  19          uint updated_fre;         //接收到的频率值
  20          uint updated_duty_ratio;  //接收到的占空比值
  21          uchar updated_channel;
  22          uint base_time;//时基
  23          
  24          //函数申明
  25          void pwm_set(uint , uint ); //定义PWM波配置函数
  26          uint get_pwm_fre();         //此函数得到频率值
  27          uint get_pwm_duty_ratio();  //此函数得到占空比值
  28          uchar get_pwm_channel();    //此函数得到通道值
  29          
  30          //主函数
  31          void main()
  32          { 
  33   1        system_init();
  34   1        delay_ms(20);
  35   1        sendstring("Welcome!\r\n");       
  36   1        sendstring("Please input 'SET x **** XXX';   x is the channel of P0;\r\n"); 
  37   1        sendstring("**** is the frequency of PWM,2-2000Hz; XXX is duty ratio,0-100% \r\n");
  38   1        while(1)
  39   1        {     
  40   2          if(send_flag)//接收到10位数据
  41   2          {
  42   3            send_flag=0;
  43   3            flag_error=0;
  44   3            if(((Buffer[0]!=Buffer_1[0])||(Buffer[1]!=Buffer_1[1]))||(Buffer[2]!=Buffer_1[2]))
  45   3            {
  46   4              sendstring("error occured,Please start with SET,like'SET 0 2000 090'\r\n");
  47   4              flag_error=1;
  48   4            }   
  49   3            //更新pwm波设置
  50   3            updated_channel=get_pwm_channel();
  51   3            updated_fre=get_pwm_fre();
  52   3            updated_duty_ratio=get_pwm_duty_ratio();
  53   3            //输出pwm配置信息
  54   3            sendstring("pwm_channel is:");
C51 COMPILER V9.54   PWM                                                                   03/03/2016 01:22:56 PAGE 2   

  55   3            senddata(updated_channel+'0');
  56   3            sendstring("\r\n");
  57   3            sendstring("frequency is:");
  58   3            senddata(updated_fre/1000+'0');
  59   3            senddata(updated_fre/100%10+'0');
  60   3            senddata(updated_fre/10%10+'0');
  61   3            senddata(updated_fre%10+'0');
  62   3            sendstring("Hz \r\n");
  63   3            sendstring("duty ratio is:");
  64   3            senddata(updated_duty_ratio/100+'0');
  65   3            senddata(updated_duty_ratio/10%10+'0');
  66   3            senddata(updated_duty_ratio%10+'0');
  67   3            sendstring("% \r\n");
  68   3            //PWM配置正确性检测
  69   3            if(updated_channel>7)
  70   3            {
  71   4              sendstring("error occured,Please set channel of P0 between 0 and 7,like'SET 0 2000 090'\r\n");
  72   4              flag_error=1;
  73   4            }
  74   3            if(updated_fre<=1||updated_fre>2000)
  75   3            {
  76   4              sendstring("error occured,Please set frequence between 2 and 2000,like'SET 0 2000 090'\r\n");
  77   4              flag_error=1;
  78   4            }
  79   3            if(updated_duty_ratio>100)
  80   3            {
  81   4              sendstring("error occured,Please set duty_ratio between 0 and 100,like'SET 0 2000 090'\r\n");
  82   4              flag_error=1;
  83   4            }
  84   3            //若串口输入无错误，生成pwm波
  85   3            if(flag_error==0)//此时接收到正确格式的数据
  86   3            {
  87   4              pwm_set(updated_fre,updated_duty_ratio);//频率100Hz，占空比10
  88   4              sendstring("PWM rate has been updated! \r\n \r\n");
  89   4            }
  90   3          }
  91   2        }
  92   1      }
  93          void pwm_set(uint freq, uint duty_ratio)
  94          {
  95   1        unsigned long int pwm_period;
  96   1        
  97   1        TR0=0;
  98   1        if(freq>1000)   //1000HZ周期为1000us
  99   1        {
 100   2          //时间基5us
 101   2          base_time=5;
 102   2          TH0=(65536-5)/256;//16位定时器自动不可重装载值
 103   2          TL0=(65536-5)%256;
 104   2        }
 105   1        else if(freq>100) //100HZ周期为10ms
 106   1        {
 107   2          //时间基10us
 108   2          base_time=10;
 109   2          TH0=(65536-10)/256; 
 110   2          TL0=(65536-10)%256;
 111   2        }
 112   1        else if(freq>10)  //10HZ周期为100ms
 113   1        {
 114   2          //时间基100us
 115   2          base_time=100;
 116   2          TH0=(65536-100)/256;
C51 COMPILER V9.54   PWM                                                                   03/03/2016 01:22:56 PAGE 3   

 117   2          TL0=(65536-100)%256;
 118   2        }
 119   1        else        //1HZ周期为1000ms
 120   1        {
 121   2          //时间基1ms
 122   2          base_time=1000;
 123   2          TH0=(65536-1000)/256;
 124   2          TL0=(65536-1000)%256;
 125   2        }
 126   1        pwm_period=(1000000/freq);          //算得周期，范围500-1000000us;(0.5ms-1000ms)
 127   1        num=pwm_period/base_time;         //进中断的次数，代表一个周期时间
 128   1        num_high=num*duty_ratio/100;        //高电平时间
 129   1        
 130   1        num-=8;//补偿定时器累积误差 需要实测，stc15单片机速度较快所以误差较小；stc89c51可能需要改
 131   1        //不一定是8，需要接了示波器，或者逻辑分析仪看脉宽。
 132   1        num_high=num_high-(8*duty_ratio/100);//尽量修正定时误差
 133   1        
 134   1        TR0=1;//开定时器0
 135   1      }
 136          
 137          void timer0() interrupt 1  //定时器0中断，只用一个定时器
 138          {
 139   1        TH0=(65536-base_time)/256;
 140   1        TL0=(65536-base_time)%256;
 141   1        n++;
 142   1        if(n==num_high)//定时器内处理语句尽量少
 143   1        {
 144   2          //只有当到等于num_high时，才改变io口电平
 145   2          switch(updated_channel)
 146   2          {
 147   3            case 0:p0=0;break;
 148   3            case 1:p1=0;break;
 149   3            case 2:p2=0;break;
 150   3            case 3:p3=0;break;
 151   3            case 4:p4=0;break;
 152   3            case 5:p5=0;break;
 153   3            case 6:p6=0;break;
 154   3            case 7:p7=0;break;
 155   3            default:break;  
 156   3          }
 157   2        }
 158   1        if(n>=num)//一个周期结束，将io口置高
 159   1        {
 160   2          n=0;
 161   2          switch(updated_channel)
 162   2          {
 163   3            case 0:p0=1;break;
 164   3            case 1:p1=1;break;
 165   3            case 2:p2=1;break;
 166   3            case 3:p3=1;break;
 167   3            case 4:p4=1;break;
 168   3            case 5:p5=1;break;
 169   3            case 6:p6=1;break;
 170   3            case 7:p7=1;break;
 171   3            default:break;  
 172   3          }
 173   2        }
 174   1      
 175   1      }
 176          
 177          void uart_isr() interrupt 4
 178          {
C51 COMPILER V9.54   PWM                                                                   03/03/2016 01:22:56 PAGE 4   

 179   1        static uchar ii; 
 180   1        ES=0;
 181   1        if(RI)
 182   1        {
 183   2          RI=0;
 184   2          Buffer[ii]=SBUF;
 185   2          ii++;
 186   2          if(ii==14)  //  接收到14个字符才置位
 187   2          {
 188   3            ii=0;
 189   3            send_flag=1;
 190   3          }
 191   2        }
 192   1        ES=1;
 193   1      }
 194          
 195          uchar get_pwm_channel()
 196          {
 197   1        uchar cha;
 198   1        cha=(Buffer[4]-'0');
 199   1        return cha;
 200   1      }
 201          uint get_pwm_fre()
 202          {
 203   1        uint fre;
 204   1        fre=(Buffer[6]-'0')*1000+(Buffer[7]-'0')*100+(Buffer[8]-'0')*10+(Buffer[9]-'0');
 205   1        return fre;
 206   1      }
 207          
 208          uint get_pwm_duty_ratio()
 209          {
 210   1        uint wet;
 211   1        wet=(Buffer[11]-'0')*100+(Buffer[12]-'0')*10+(Buffer[13]-'0');
 212   1        return wet;
 213   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1081    ----
   CONSTANT SIZE    =    520    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     43       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
